// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package elastic

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(in *jlexer.Lexer, out *SearchResponseEasyJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "took":
			out.Took = int(in.Int())
		case "time_out":
			out.TimeOut = bool(in.Bool())
		case "_shards":
			if m, ok := out.Shards.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Shards.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Shards = in.Interface()
			}
		case "hits":
			easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic1(in, &out.Hits)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(out *jwriter.Writer, in SearchResponseEasyJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"took\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Took))
	}
	{
		const prefix string = ",\"time_out\":"
		out.RawString(prefix)
		out.Bool(bool(in.TimeOut))
	}
	{
		const prefix string = ",\"_shards\":"
		out.RawString(prefix)
		if m, ok := in.Shards.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Shards.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Shards))
		}
	}
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix)
		easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic1(out, in.Hits)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SearchResponseEasyJson) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SearchResponseEasyJson) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SearchResponseEasyJson) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SearchResponseEasyJson) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic(l, v)
}
func easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic1(in *jlexer.Lexer, out *SearchHitsEasyJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "total":
			out.Total = int64(in.Int64())
		case "hits":
			if in.IsNull() {
				in.Skip()
				out.Hits = nil
			} else {
				in.Delim('[')
				if out.Hits == nil {
					if !in.IsDelim(']') {
						out.Hits = make(SearchDataHitsEasyJsons, 0, 2)
					} else {
						out.Hits = SearchDataHitsEasyJsons{}
					}
				} else {
					out.Hits = (out.Hits)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SearchDataHitsEasyJson
					easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic2(in, &v1)
					out.Hits = append(out.Hits, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic1(out *jwriter.Writer, in SearchHitsEasyJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"total\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Total))
	}
	{
		const prefix string = ",\"hits\":"
		out.RawString(prefix)
		if in.Hits == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Hits {
				if v2 > 0 {
					out.RawByte(',')
				}
				easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic2(out, v3)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson25720c23DecodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic2(in *jlexer.Lexer, out *SearchDataHitsEasyJson) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "_source":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Source).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson25720c23EncodeGithubComTiketTIXHOTELUTILITIESGOSearchtoolElastic2(out *jwriter.Writer, in SearchDataHitsEasyJson) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"_source\":"
		out.RawString(prefix[1:])
		out.Raw((in.Source).MarshalJSON())
	}
	out.RawByte('}')
}
